
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module de0_nano(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// EPCS //////////
	EPCS_ASDO,
	EPCS_DATA0,
	EPCS_DCLK,
	EPCS_NCSO,

	//////////// Accelerometer and EEPROM //////////
	G_SENSOR_CS_N,
	G_SENSOR_INT,
	I2C_SCLK,
	I2C_SDAT,

	//////////// ADC //////////
	ADC_CS_N,
	ADC_SADDR,
	ADC_SCLK,
	ADC_SDAT,

	//////////// 2x13 GPIO Header //////////
	GPIO_2,
	GPIO_2_IN,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	GPIO_0,
	GPIO_0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	GPIO_1,
	GPIO_1_IN 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

//////////// SW //////////
input 		     [3:0]		SW;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [15:0]		DRAM_DQ;
output		     [1:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// EPCS //////////
output		          		EPCS_ASDO;
input 		          		EPCS_DATA0;
output		          		EPCS_DCLK;
output		          		EPCS_NCSO;

//////////// Accelerometer and EEPROM //////////
output		          		G_SENSOR_CS_N;
input 		          		G_SENSOR_INT;
output		          		I2C_SCLK;
inout 		          		I2C_SDAT;

//////////// ADC //////////
output		          		ADC_CS_N;
output		          		ADC_SADDR;
output		          		ADC_SCLK;
input 		          		ADC_SDAT;

//////////// 2x13 GPIO Header //////////
inout 		    [12:0]		GPIO_2;
input 		     [2:0]		GPIO_2_IN;

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_0;
input 		     [1:0]		GPIO_0_IN;

//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_1;
input 		     [1:0]		GPIO_1_IN;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [33:0] IN_GPIO_0;
assign IN_GPIO_0 = GPIO_0;

wire [33:0] IN_GPIO_1;
assign IN_GPIO_1 = GPIO_1;

wire [33:0] OUT_GPIO_0;
assign GPIO_0 = OUT_GPIO_0;

wire [33:0] OUT_GPIO_1;
assign GPIO_1 = OUT_GPIO_1;

assign OUT_GPIO_1 [15:10] = 6'bz;
assign OUT_GPIO_1 [33:26] = 6'bz;

wire unused1 =
    & { KEY, SW, EPCS_DATA0, G_SENSOR_INT, ADC_SDAT };

assign DRAM_DQ  = 1'bz;
assign I2C_SDAT = 1'bz;

assign DRAM_ADDR = 0;
assign DRAM_BA = 0;
assign DRAM_CAS_N = 0;
assign DRAM_CKE = 0;
assign DRAM_CLK = 0;
assign DRAM_CS_N = 0;
assign DRAM_DQM = 0;
assign DRAM_RAS_N = 0;
assign DRAM_WE_N = 0;
assign EPCS_ASDO = 0;
assign EPCS_DCLK = 0;
assign EPCS_NCSO = 0;
assign G_SENSOR_CS_N = 0;
assign I2C_SCLK = 0;
assign ADC_CS_N = 0;
assign ADC_SADDR = 0;
assign ADC_SCLK = 0;

//=======================================================
//  Structural coding
//=======================================================

top top
(
    .clock (CLOCK_50),

    .port_e
    ({
        IN_GPIO_1 [33],
        IN_GPIO_1 [32],
        IN_GPIO_1 [31],
        IN_GPIO_1 [30],
        IN_GPIO_1 [29],
        IN_GPIO_1 [28],
        IN_GPIO_1 [27],
        IN_GPIO_1 [26]
    }),

    .port_f
    ({
        GPIO_1_IN [0],
        IN_GPIO_1 [10],
        GPIO_1_IN [1],
        IN_GPIO_1 [11]
    }),
        
    .port_d
    ({
        IN_GPIO_1 [12],
        IN_GPIO_1 [13],
        IN_GPIO_1 [14],
        IN_GPIO_1 [15]
    }),
        
    .display
    ({
        OUT_GPIO_0 [11],
        OUT_GPIO_0 [13],
        OUT_GPIO_0 [15],
        OUT_GPIO_0 [17],
        OUT_GPIO_0 [19],
        OUT_GPIO_0 [21],

        OUT_GPIO_1 [21],
        OUT_GPIO_1 [19],
        OUT_GPIO_1 [17],
        OUT_GPIO_1 [15],
        OUT_GPIO_1 [13],
        OUT_GPIO_1 [11]
    }),

    .leds (LED)
);

endmodule
